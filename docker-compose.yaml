services:
  backend:
    build: ./backend
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    volumes:
      - ./static:/app/static
      - ./static/dist/index.html:/app/backend/views/index.html
      - ./.env:/app/backend/.env
    depends_on:
      - postgres
    networks:
      - mynetwork
    restart: unless-stopped

  frontend:
    build: ./frontend
    command: ["npm", "run", "build"]
    volumes:
      - ./frontend:/app/frontend
    networks:
      - mynetwork
    restart: unless-stopped

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    restart: unless-stopped

  nginx:
    image: nginx:1.21.6-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/usr/share/nginx/html
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - mynetwork
    restart: unless-stopped

  adminer:
    image: adminer:4.8.1
    container_name: adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    networks:
      - mynetwork
    restart: unless-stopped

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data: